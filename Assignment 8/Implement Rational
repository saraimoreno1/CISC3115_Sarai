public class rational extends Number implements Comparable {
	private long numerator = 0;
	private long denominator = 1;

public Rational() {
	this(0,1);
}

public Rational(long numerator, long denominator) {
	long gcd = gcd(numerator, denominator);

this.numerator = ((denominator > 0) ? 1 : -1) * numerator / gcd;
this.denominator = Math.abs(denominator) / gcd;
}

public long getNumerator() {
	return numerator;
}

public long getDenominator() {
	return denominator;
}

public Rational add(Rational secondRational) {
	long n = numerator * secondRational.getDenominator() +
		denominator * secondRational.getNumerator();

	long d = denominator * secondRational.getDenominator();

	return new Rational(n, d);
}

public Rational subtract(Rational secondRational) {
long n = numerator * secondRational.getDenominator() -
		denominator * secondRational.getNumerator();

	long d = denominator * secondRational.getDenominator();

	return new Rational(n, d);
}

public Rational multiply(Rational secondRational) {
	long n = numerator * secondRational.getNumerator() 

	long d = denominator * secondRational.getDenominator();

	return new Rational(n, d);
}

public Rational divide(Rational secondRational) {
	long n = numerator * secondRational.getDenominator() / 
		denominator * secondRational.getNumerator();

	long d = denominator * secondRational.getNumerator();

	return new Rational(n, d);
}

public String toString() {
	if (denominator == 1) 
		return numerator;
	else 
		return numerator + “ / “ + denominator;
}

private static long gcd(long n, long d) {
	long num1 = Math.abs(n);
	long num2 = Math.abs(d);
	int gcd = 1;

	for (int i = 1; i <= num1 && i <= num2; i++) {
		if (num1 % i == 0 && num2 % i == 0) 
		gcd = i;
}

public int intValue() {
	return (int) doubleValue();
}

public float floatValue() {
	return (float) doubleValue();
}

public double doubleValue() {
	return numerator * 1.0 / denominator;
}

@Override 
public long longValue() {
	return (long) doubleValue();
}

public int compareTo (Rational o) {
	if (this.subtract(o).getNumerator() > 0)
		return 1;
	else if (this.subtract(o).getNumerator() < 0) 
		return -1;
	else 
		return 0;
}
}
